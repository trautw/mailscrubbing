#!/bin/bash
source $HOME/.rvm/scripts/rvm
exec ruby -x $0 "$@"
#!ruby
require 'net/imap'
require 'yaml'

# mostly written by Al Alexander, http://DevDaily.com
# (okay, okay, i copied a lot of it and glued it together)

# ==========
# IMAP FLAGS
# ==========
# BEFORE <date>:  8-Aug-2002.
# BODY <string>:
# CC <string>:
# FROM <string>:
# NEW:  messages with the \Recent, but not the \Seen, flag set.
# NOT <search-key>:
# OR <search-key> <search-key>: "or" two search keys together.
# ON <date>:
# SINCE <date>:
# SUBJECT <string>:
# TO <string>:

# ===============
# ENVELOPE FIELDS
# ===============
# date:
# subject:
# from:     an array of Net::IMAP::Address
# sender:   an array of Net::IMAP::Address
# reply_to: an array of Net::IMAP::Address
# to:       an array of Net::IMAP::Address
# cc:       an array of Net::IMAP::Address
# bcc:      an array of Net::IMAP::Address

# ==============
# ADDRESS FIELDS
# ==============

# name:
# route:
# mailbox:
# host:

defaults = YAML.load('
---
  server: "MY-MAILSERVER"
  user: "MY-USERNAME"
  pass: "MY-PASSWORD"
  folder: "daily"
  port: 993
')

conf = defaults.merge( rc = YAML.load( File.open("#{ENV['HOME']}/.mailscrubbing.rc").read ))

imap = Net::IMAP.new(conf['server'], conf['port'], true)
imap.login(conf['user'], conf['pass'])

last_24_hours = (Time.now - 24*60*60).strftime("%d-%b-%Y")

def pretty_mail_adresses(mailadresses)
  result = ""
  mailadresses.each do |mailadress|
    result = "#{result} #{mailadress.mailbox}@#{mailadress.host}"
  end
  result
end

def print_mail_in_short(msg)
  date = msg.attr["ENVELOPE"].date
  body = msg.attr["BODY[TEXT]"]
  puts "From   : #{pretty_mail_adresses(msg.attr['ENVELOPE'].from)}"
  puts "To   : #{pretty_mail_adresses(msg.attr['ENVELOPE'].to)}"
  puts "Subject: #{msg.attr['ENVELOPE'].subject}"
  puts "Date   : #{date}"
  # puts "#{body}"
end

imap.list("", "#{conf['folder']}/%").each do |folder|
  # puts "Folder #{folder.name}"
  folder_name = folder.name
  imap.select(folder_name)

  # Check if mails still arriving
  last_24_mails = imap.search(["SINCE", last_24_hours])

  if last_24_mails.count < 1 or last_24_mails.count > 2
    puts "\nERROR: Fresh mail count should be 1 or 2 in #{folder_name}"
    last_24_mails.each do |msg_id|
      msg = imap.fetch(msg_id, "(UID RFC822.SIZE ENVELOPE BODY[TEXT])")[0]
      print_mail_in_short(msg)
    end
  end

  # Check latest Mail for errors
  imap.search(["SINCE", last_24_hours]).each do |msg_id|
    msg = imap.fetch(msg_id, "(UID RFC822.SIZE ENVELOPE BODY[TEXT])")[0]
    body = msg.attr["BODY[TEXT]"]
    # puts "#{body}"
    if body.downcase().gsub(/(logs\/www\/error_log|qweqwe)/,'this_is_ok').include? "error"
      puts "\nERROR"
      print_mail_in_short(msg)
    end
    if body.downcase().include? "fatal"
      puts "FATAL"
      print_mail_in_short(msg)
    end
  end

  # Delete old mails
  old_before = (Time.now - 10*24*60*60).strftime("%d-%b-%Y")
  imap.search(["NOT", "SINCE", old_before]).each do |msg_id|
    msg = imap.fetch(msg_id, "(UID RFC822.SIZE ENVELOPE BODY[TEXT])")[0]
    # puts "\nDELETING"
    # print_mail_in_short(msg)
    imap.store(msg_id, "+FLAGS", [:Deleted])
  end
end

