#!/bin/bash
source $HOME/.rvm/scripts/rvm
exec ruby -x $0 "$@"
#!ruby
require 'net/imap'
require 'yaml'

# mostly written by Al Alexander, http://DevDaily.com
# (okay, okay, i copied a lot of it and glued it together)

# ==========
# IMAP FLAGS
# ==========
# BEFORE <date>:  8-Aug-2002.
# BODY <string>:
# CC <string>:
# FROM <string>:
# NEW:  messages with the \Recent, but not the \Seen, flag set.
# NOT <search-key>:
# OR <search-key> <search-key>: "or" two search keys together.
# ON <date>:
# SINCE <date>:
# SUBJECT <string>:
# TO <string>:

# ===============
# ENVELOPE FIELDS
# ===============
# date:
# subject:
# from:     an array of Net::IMAP::Address
# sender:   an array of Net::IMAP::Address
# reply_to: an array of Net::IMAP::Address
# to:       an array of Net::IMAP::Address
# cc:       an array of Net::IMAP::Address
# bcc:      an array of Net::IMAP::Address

# ==============
# ADDRESS FIELDS
# ==============

# name:
# route:
# mailbox:
# host:

defaults = YAML.load('
---
  server: "MY-MAILSERVER"
  user: "MY-USERNAME"
  pass: "MY-PASSWORD"
  folder: "daily"
  port: 993
  arrival_period: 1
  min_mails: 1
  max_mails: 2
  maxage: 30
  folder_name: "daily"
  by_cron_job:
    min_mails: 5
    max_mails: 10
')

conf = defaults.merge( rc = YAML.load( File.open("#{ENV['HOME']}/.mailscrubbing.rc").read ))

# puts "conf = #{conf}"

imap = Net::IMAP.new(conf['server'], conf['port'], true)
imap.login(conf['user'], conf['pass'])

def pretty_mail_adresses(mailadresses)
  result = ""
  mailadresses.each do |mailadress|
    result = "#{result} #{mailadress.mailbox}@#{mailadress.host}"
  end
  result
end

def print_mail_in_short(msg)
  date = msg.attr["ENVELOPE"].date
  body = msg.attr["BODY[TEXT]"]
  puts "From   : #{pretty_mail_adresses(msg.attr['ENVELOPE'].from)}"
  puts "To   : #{pretty_mail_adresses(msg.attr['ENVELOPE'].to)}"
  puts "Subject: #{msg.attr['ENVELOPE'].subject}"
  puts "Date   : #{date}"
  # puts "#{body}"
end

# puts "Foldername = #{conf['folder_name']}"

imap.list("", "#{conf['folder_name']}/%").each do |folder|
  # puts "Folder #{folder.name}"
  folder_name = folder.name
  imap.select(folder_name)

  base_folder_name = folder_name.split('/')[1]
  # puts "Base Folder Name = #{base_folder_name}"

  arrival_period = conf['arrival_period']
  unless conf[base_folder_name].nil? or conf[base_folder_name]['arrival_period'].nil?
    arrival_period =  conf[base_folder_name]['arrival_period']
  end

  min_mails = conf['min_mails']
  unless conf[base_folder_name].nil? or conf[base_folder_name]['min_mails'].nil?
    min_mails =  conf[base_folder_name]['min_mails']
  end

  max_mails = conf['max_mails']
  unless conf[base_folder_name].nil? or conf[base_folder_name]['max_mails'].nil?
    max_mails =  conf[base_folder_name]['max_mails']
  end

  # Check if mails still arriving
  arrival_hours = (Time.now - 24*60*60*arrival_period).strftime("%d-%b-%Y")
  last_24_mails = imap.search(["SINCE", arrival_hours])

  if last_24_mails.count < min_mails or last_24_mails.count > max_mails
    puts "\nERROR: Fresh mail count is #{last_24_mails.count} but should be between #{min_mails} and #{max_mails} in #{folder_name}"
    last_24_mails.each do |msg_id|
      msg = imap.fetch(msg_id, "(UID RFC822.SIZE ENVELOPE BODY[TEXT])")[0]
      print_mail_in_short(msg)
    end
  end

  last_24_hours = (Time.now - 24*60*60).strftime("%d-%b-%Y")
  # Check latest Mail for errors
  imap.search(["SINCE", last_24_hours]).each do |msg_id|
    msg = imap.fetch(msg_id, "(UID RFC822.SIZE ENVELOPE BODY[TEXT])")[0]
    body = msg.attr["BODY[TEXT]"]
    # puts "#{body}"
    if body.downcase().gsub(/(logs\/www\/error_log|if_errors-6in4-wan6.rrd|ElsterErrorInfos.txt|Error 404 - Natural Things.mp3)/,'this_is_ok').include? "error"
      puts "\nERROR"
      print_mail_in_short(msg)
    end
    if body.downcase().include? "fatal"
      puts "\nFATAL"
      print_mail_in_short(msg)
    end
    if body.downcase().include? "critical"
      puts "\nCRITICAL"
      print_mail_in_short(msg)
    end
  end

  maxage = conf['maxage']
  unless conf[base_folder_name].nil? or conf[base_folder_name]['maxage'].nil?
    maxage =  conf[base_folder_name]['maxage']
  end

  # Delete old mails
  old_before = (Time.now - maxage*24*60*60).strftime("%d-%b-%Y")
  imap.search(["NOT", "SINCE", old_before]).each do |msg_id|
    msg = imap.fetch(msg_id, "(UID RFC822.SIZE ENVELOPE BODY[TEXT])")[0]
    # puts "\nDELETING"
    # print_mail_in_short(msg)
    imap.store(msg_id, "+FLAGS", [:Deleted])
  end
end

mydir = File.expand_path(File.dirname(__FILE__))
# puts "mydir = #{mydir}"
Dir.chdir(mydir)
system 'git pull -q'

